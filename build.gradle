/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'zafu' at '12/5/16 7:14 PM' with Gradle 2.3
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.3/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'pmd'
apply plugin: 'jacoco'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

project.ext {
    dropwizardVersion = '0.9.2'
}


jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'org.winning.blackjack.BlackJackGameEntry'
    }
}

dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile "org.projectlombok:lombok:1.16.14"
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'ch.qos.logback:logback-classic:1.1.7'
    compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.0'
    compile (
            'io.dropwizard:dropwizard-core:' + dropwizardVersion,
    )
    compile 'org.mongodb:mongo-java-driver:2.13.3'
    compile group: 'com.google.inject', name: 'guice', version: '3.0'

    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-core:1.+"
}

sourceSets {
    integTest {
        java.srcDir file('src/test/java/integration')
        resources.srcDir file('src/test/java/integration/resources')
    }
}

task integTest(type: Test) {
    testClassesDir = sourceSets.integTest.output.classesDir
    classpath = sourceSets.integTest.runtimeClasspath
}

check.dependsOn integTest


task copyToLib( type: Copy ) {
    into "$buildDir/lib"
    from configurations.runtime
}

jar { dependsOn copyToLib }

clean {
    delete "${buildDir}/classes/"
    delete "${buildDir}/dependency-cache/"
    delete "${buildDir}/reports/"
    delete "${buildDir}/test-results/"
    delete "${buildDir}/tmp/"
}

pmd {
    toolVersion = "5.0.4"
    sourceSets = [sourceSets.main]
    ignoreFailures = true
    ruleSets = []
    ruleSetFiles = files("$rootDir/conf/pmd/pmd-rulesets.xml")
}
